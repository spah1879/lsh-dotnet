using Kr.Re.Nsr.Crypto;

class LSH256VS
{
  private static readonly byte[] EXP0000 = { 0xf3, 0xcd, 0x41, 0x6a, 0x03, 0x81, 0x82, 0x17, 0x72, 0x6c, 0xb4, 0x7f, 0x4e, 0x4d, 0x28, 0x81, 0xc9, 0xc2, 0x9f, 0xd4, 0x45, 0xc1, 0x8b, 0x66, 0xfb, 0x19, 0xde, 0xa1, 0xa8, 0x10, 0x07, 0xc1 };

  private static readonly byte[] EXP0001 = { 0xfd, 0x5b, 0xe8, 0x99, 0xff, 0x15, 0x74, 0x3e, 0x75, 0xc1, 0xde, 0xfb, 0xdc, 0xd8, 0xbd, 0x8f, 0x10, 0x39, 0x75, 0xd8, 0x1d, 0x64, 0xd7, 0xe3, 0x5f, 0xe9, 0xe2, 0x3d, 0x98, 0x6e, 0x66, 0x62 };
  private static readonly byte[] EXP0002 = { 0x10, 0xae, 0x63, 0xfd, 0x3d, 0xc6, 0x3f, 0xa8, 0xe2, 0x1b, 0x51, 0xae, 0xa0, 0xd4, 0x6d, 0x40, 0x95, 0x7c, 0xc0, 0x8e, 0x0d, 0x8f, 0x6a, 0x74, 0xcb, 0xfd, 0xaf, 0xf1, 0x61, 0xe0, 0xc0, 0xc2 };
  private static readonly byte[] EXP0007 = { 0x34, 0x14, 0x0d, 0x1e, 0x77, 0x87, 0x2c, 0x87, 0x99, 0xc1, 0xeb, 0xb3, 0x55, 0xcb, 0xb3, 0xe6, 0x19, 0x31, 0xf4, 0x59, 0x4c, 0x34, 0x7a, 0x29, 0xa1, 0x2f, 0x29, 0x3a, 0x46, 0xdf, 0x0f, 0xe1 };

  private static readonly byte[] EXP0008 = { 0xcf, 0x25, 0xc4, 0x7e, 0xb1, 0xef, 0xa7, 0x7d, 0x2f, 0x7a, 0x1d, 0xfc, 0xc0, 0x9f, 0x4d, 0x3a, 0xcf, 0xe9, 0x7d, 0xc7, 0x7c, 0x31, 0x7b, 0x43, 0x97, 0x6e, 0x7b, 0x23, 0x8d, 0xa3, 0xdc, 0x71 };
  private static readonly byte[] EXP0015 = { 0x0a, 0xfe, 0xa6, 0xcd, 0xc8, 0xba, 0x4c, 0x2b, 0x2f, 0x5f, 0xb1, 0xf3, 0x2e, 0xd2, 0x7c, 0x22, 0xac, 0xc8, 0x81, 0x4e, 0x70, 0xd5, 0x4f, 0x64, 0xb6, 0x23, 0xb4, 0x10, 0x9b, 0x32, 0x21, 0x77 };
  private static readonly byte[] EXP0016 = { 0x70, 0x59, 0x9e, 0x67, 0x39, 0x9e, 0xa1, 0x45, 0x8c, 0x9d, 0xdc, 0xb8, 0x31, 0x4b, 0x7a, 0xbb, 0x4c, 0x6e, 0x97, 0xa5, 0x97, 0x98, 0x4d, 0x67, 0x76, 0xa3, 0x0f, 0xf5, 0xbc, 0x87, 0xfe, 0xd6 };

  private static readonly byte[] EXP1023 = { 0x69, 0xbd, 0x57, 0x58, 0x0e, 0xaf, 0x01, 0xf8, 0xce, 0x84, 0x5d, 0x02, 0x3f, 0x07, 0x0a, 0x36, 0x16, 0x34, 0x75, 0x09, 0x84, 0x7f, 0x99, 0x48, 0xbb, 0x1a, 0x04, 0xed, 0x6c, 0x70, 0x63, 0xc7 };
  private static readonly byte[] EXP1024 = { 0x2d, 0x44, 0xa9, 0x0b, 0x60, 0xf6, 0x96, 0xe8, 0xfa, 0x4b, 0xb2, 0x54, 0x32, 0xe2, 0x2d, 0xeb, 0xa1, 0xd9, 0x77, 0x5c, 0xff, 0x56, 0x06, 0xdb, 0xa2, 0x54, 0x5d, 0x17, 0xe2, 0xd4, 0xbf, 0x9a };
  private static readonly byte[] EXP1025 = { 0xe4, 0x73, 0x27, 0x8f, 0x03, 0x77, 0x60, 0xdf, 0x87, 0x20, 0xf9, 0xab, 0xca, 0x62, 0xbf, 0x38, 0x1c, 0xc3, 0x23, 0x2a, 0xc6, 0x8e, 0xce, 0x3e, 0xb3, 0xa8, 0x01, 0xa0, 0x7c, 0xe5, 0xaf, 0x64 };

  private static readonly byte[] EXP2047 = { 0x7c, 0xe1, 0x25, 0xd1, 0x98, 0x4a, 0x19, 0xd6, 0x52, 0x2d, 0x4a, 0xfc, 0xa5, 0xeb, 0x6a, 0x48, 0xa8, 0x98, 0xfa, 0xd5, 0xb4, 0xfd, 0x94, 0x36, 0xa3, 0x2f, 0xbc, 0x9e, 0x16, 0x07, 0xe0, 0x8c };
  private static readonly byte[] EXP2048 = { 0x71, 0xbb, 0x40, 0x71, 0xbc, 0x78, 0x9e, 0x2c, 0x48, 0xb7, 0x26, 0xb5, 0x46, 0xa5, 0x29, 0xcb, 0x6a, 0x18, 0x51, 0xa7, 0x68, 0x6c, 0x36, 0x12, 0xad, 0xe3, 0xf7, 0xc0, 0x16, 0x0d, 0x68, 0x84 };
  private static readonly byte[] EXP2049 = { 0xca, 0x9e, 0x93, 0x28, 0xdb, 0x05, 0xbd, 0x14, 0xa7, 0x64, 0xdb, 0x5a, 0x78, 0x09, 0x09, 0xc2, 0x13, 0x0a, 0x1c, 0xae, 0x86, 0xc5, 0xdb, 0xfb, 0x36, 0xa9, 0xe4, 0x4a, 0x88, 0x93, 0x54, 0x3c };

  private static readonly byte[] EXP3071 = { 0x28, 0xf3, 0xe6, 0x95, 0x26, 0x76, 0x56, 0xad, 0x99, 0xe0, 0x90, 0x6c, 0x46, 0xd1, 0x7e, 0x98, 0xee, 0x3f, 0xb0, 0x02, 0xe1, 0x7a, 0xcd, 0x39, 0x43, 0xc7, 0x0d, 0x1d, 0xf9, 0x70, 0x52, 0xab };
  private static readonly byte[] EXP3072 = { 0x10, 0xc8, 0xe2, 0x52, 0x25, 0xfb, 0xea, 0xc3, 0x94, 0xd2, 0x86, 0xaf, 0xc7, 0x9e, 0xc1, 0x7f, 0x40, 0x06, 0x5f, 0x74, 0x85, 0xaa, 0x61, 0xf0, 0x7c, 0xed, 0x06, 0x3c, 0x7f, 0xe9, 0x17, 0x7d };
  private static readonly byte[] EXP3073 = { 0xa7, 0x6a, 0x9d, 0x0f, 0xd7, 0xc9, 0xd3, 0x55, 0xdb, 0x14, 0x72, 0xa3, 0xdb, 0xde, 0xc7, 0xb6, 0x67, 0x90, 0xef, 0x8c, 0x0b, 0x0e, 0x7b, 0x17, 0x2d, 0xf8, 0xf6, 0x08, 0x43, 0xc1, 0x3b, 0xf4 };

  public static void Test()
  {
    byte[] data = new byte[385];

    for (int i = 0; i < data.Length; i++)
    {
      data[i] = (byte)(i & 0xff);
    }

    Console.WriteLine("----- LSH256 Test -----");
    Test(data, EXP0000, 0);
    Test(data, EXP0001, 1);
    Test(data, EXP0002, 2);
    Test(data, EXP0007, 7);
    Test(data, EXP0008, 8);
    Test(data, EXP0015, 15);
    Test(data, EXP0016, 16);
    Test(data, EXP1023, 1023);
    Test(data, EXP1024, 1024);
    Test(data, EXP1025, 1025);
    Test(data, EXP2047, 2047);
    Test(data, EXP2048, 2048);
    Test(data, EXP2049, 2049);
    Test(data, EXP3071, 3071);
    Test(data, EXP3072, 3072);
    Test(data, EXP3073, 3073);
    Console.WriteLine();
  }
  static void Test(byte[] data, byte[] reference, int len)
  {
    Hash lsh = Hash.GetInstance(Hash.Algorithm.LSH256_256);
    lsh.Update(data, 0, len);
    byte[] hash = lsh.DoFinal();

    Console.WriteLine($"LSH256-TEST {len,4} : {Enumerable.SequenceEqual(hash, reference)}");
  }
}
